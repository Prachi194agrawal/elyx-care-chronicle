generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Member {
  id                    String   @id @default(cuid())
  name                  String
  email                 String   @unique
  phone                 String
  dateOfBirth           DateTime
  profileImage          String?
  healthGoals           String[]
  currentConditions     String[]
  medications           String[]
  allergies             String[]
  communicationPreference String
  timeZone              String
  preferredContactTime  String
  joinDate              DateTime
  lastActive            DateTime
  engagementLevel       String
  planAdherence         Int
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relations
  healthMetrics         HealthMetric[]
  episodes              Episode[]
  conversations         Conversation[]
  
  @@map("members")
}

model HealthMetric {
  id        String   @id @default(cuid())
  memberId  String
  type      String   // 'weight', 'blood_pressure', 'heart_rate', etc.
  value     String   // Store as string to handle different data types
  unit      String
  timestamp DateTime
  source    String   // 'manual', 'whoop', 'garmin', etc.
  notes     String?
  createdAt DateTime @default(now())
  
  member    Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  
  @@map("health_metrics")
}

model Episode {
  id              String   @id @default(cuid())
  memberId        String
  title           String
  description     String
  category        String   // 'onboarding', 'health_concern', etc.
  priority        String   // 'low', 'medium', 'high', 'urgent'
  status          String   // 'open', 'in_progress', 'resolved'
  initiatedBy     String   // 'member', 'team'
  assignedTo      String
  startDate       DateTime
  endDate         DateTime?
  interventions   String[]
  outcomes        String[]
  frictionPoints  String[]
  tags            String[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  member          Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  
  @@map("episodes")
}

model TeamMember {
  id               String @id @default(cuid())
  name             String
  role             String // 'concierge', 'doctor', 'trainer', etc.
  title            String
  avatar           String?
  communicationStyle String
  expertise        String[]
  isOnline         Boolean @default(false)
  responseTime     Int     // average response time in minutes
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  sentMessages     Message[]
  
  @@map("team_members")
}

model Conversation {
  id            String   @id @default(cuid())
  memberId      String
  title         String?
  description   String?
  category      String   // 'general', 'medical', 'nutrition', etc.
  status        String   // 'active', 'archived', 'urgent_attention_needed'
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  member        Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  messages      Message[]
  
  @@map("conversations")
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  senderId       String   // Can be member ID or team member ID
  senderName     String
  senderRole     String   // 'member', 'concierge', 'doctor', etc.
  content        String
  timestamp      DateTime
  messageType    String   // 'text', 'image', 'document', etc.
  isRead         Boolean  @default(false)
  sentiment      String?  // 'positive', 'neutral', 'negative', 'concerned'
  topics         String[]
  actionItems    String[]
  createdAt      DateTime @default(now())
  
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  teamMember     TeamMember?  @relation(fields: [senderId], references: [id])
  
  @@map("messages")
}
